function outFile = waveTable(time, freq, fs, waveType)    % time in seconds, fs in Hz  % waveType: sin = 1 tri = 2, square = 3, saw = 4    global wtLength = 2*8192;  global sineTable = zeros(wtLength, 1);  global triTable = zeros(wtLength, 1);  global squareTable = zeros(wtLength, 1);  global sawTable = zeros(wtLength, 1);    outLength = time*fs;  outFile = zeros(outLength, 1);    initWavetables();    wtIndex = 1;    sweepFreq = logspace(1, 4, outLength);  % go from 10 Hz to 10k Hz    %phasePeriod = freq*wtLength/fs;    for(i = 1:outLength)    phasePeriod = sweepFreq(i)*wtLength/fs;    wtIndex = circBuffIndex(wtIndex, wtLength);  % when transferring this fn, pass a ptr and have incrementing handled within    outFile(i, 1) = getSampleInterp(wtIndex, waveType);    wtIndex = wtIndex + phasePeriod;  end  outFile = outFile/2;    figure 2  plot(1:outLength, outFile);    audiowrite("sweep.wav", outFile, fs);  
endfunction
function initWavetables()  global wtLength;  global sineTable;  global triTable;  global squareTable;  global sawTable;    for i = 1:wtLength    % init sine table    sineTable(i,1) = sin(2*pi*i/wtLength);        % init tri table    if i < wtLength/4      triTable(i,1) = 4*i/wtLength;    elseif (i >= wtLength/4 && i < (3/4)*wtLength)      triTable(i,1) = -4*i/wtLength + 2;    else      triTable(i,1) = 4*i/wtLength - 4;    end          % init square table    if i < wtLength/2      squareTable(i,1) = 1;    else      squareTable(i,1) = -1;    end          % init saw table    sawIn = 2*i/wtLength;    if sawIn < 1      sawTable(i,1) = sawIn;    else      sawTable(i,1) = sawIn - 2;    end  end  figure 1  subplot(2,2,1);  plot(1:wtLength, sineTable);    subplot(2,2,2);  plot(1:wtLength, triTable);    subplot(2,2,3);  plot(1:wtLength, squareTable);    subplot(2,2,4);  plot(1:wtLength, sawTable);
endfunctionfunction interpSample = getSampleInterp(fracIndex, waveType);  % 0 < fracIndex <= wtLength  global wtLength;  global sineTable;  global triTable;  global squareTable;  global sawTable;    switch(waveType)    case 1      selTable = sineTable;    case 2      selTable = triTable;    case 3      selTable = squareTable;    case 4      selTable = sawTable;  end    I = floor(fracIndex);  M = fracIndex - I;    if (fracIndex < 1)  % when sample is between the last wt and first wt sample    s1 = selTable(wtLength, 1);    s2 = selTable(I + 1, 1);  else  % assume normal non-edge case    s1 = selTable(I, 1);    s2 = selTable(I + 1, 1);  end    interpSample = (s2 - s1) * M + s1;
endfunction
function newIdx = circBuffIndex(idx, max)  % increment or decrement idx  if idx > max                             % 0 < newIdx <= wtLength    newIdx = idx - max;  elseif idx <= 0    newIdx = idx + max;  else    newIdx = idx;  end
endfunction
